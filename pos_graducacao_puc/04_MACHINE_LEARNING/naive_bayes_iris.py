# -*- coding: utf-8 -*-
"""Naive Bayes-iris.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Zwr5W6vCn_wmBQo279glyLsTp3pZCYwb

# Naïve Bayes


Ilustra o funcionamento do algoritmo de Naïve Bayes com atributos numéricos.

Este notebook foi desenvolvido para o ambiente GOOGLE COLAB ([colab.research.google.com](https://colab.research.google.com)).

Prof. Hugo de Paula

-------------------------------------------------------------------------------

### Base de dados: Iris dataset (espécies de lírios)

https://archive.ics.uci.edu/ml/datasets/Iris/

3 classes (setosa, virginica, versicolor)

50 amostras por classe

4 atributos reais positivos (comp. pétala, comp. sépala, larg. pétala, larg. sépala)

### Carga dos dados e particionamento das bases de treinamento e teste

<code>train_test_split(X, y) -- particiona a base de dados original em bases de treinamento e teste.</code>

Por padrão, 75% da base é utilizada para treinamento e 25% para testes.
"""

import pandas as pd
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import confusion_matrix, classification_report


iris = load_iris()

X_train, X_test, y_train, y_test = train_test_split(
                                iris['data'], iris['target'], random_state=0)

"""### Indução do Modelo Gaussian Naïve Bayes

O Gaussian Naïve Bayes é o algoritmo capaz de induzir um modelo a partir de dados numéricos.

Os três passos para indução de um modelo são:

1.   Instanciar o modelo: ```GaussianNB()```
2.   Treinar o modelo: ```fit()```
3.   Testar o modelo: ```predict()```
"""

gnb = GaussianNB()
y_pred = gnb.fit(X_train, y_train).predict(X_test)

print("Número de erros de classificação {0} de {1}"
      .format((y_test != y_pred).sum(), iris.data.shape[0]))

ac = gnb.score(X_test, y_test)

print("\nAcurácia do modelo: {0:.2f}%\n".format(100*ac))

print(classification_report(y_test, y_pred, target_names=iris.target_names))

cnf_matrix = confusion_matrix(y_test, y_pred)
cnf_table = pd.DataFrame(data=cnf_matrix, index=iris.target_names, columns=[x + "(prev)" for x in iris.target_names])
print(cnf_table)